#!/usr/bin/env python
from __future__ import print_function
import os
import os.path
import sys
import hashlib

from log_libraries import logparser
from log_libraries import validators
from log_libraries.utils import LOG_PATH, ValidationError, append_to_log


path_to_here = os.path.dirname(os.path.abspath(__file__))
full_arguments = sys.argv
mapping = {
    '-T': {'name': 'timestamp', 'max_args': 1},
    '-K': {'name': 'token', 'max_args': 1},
    '-E': {'name': 'employee', 'max_args': 1},
    '-G': {'name': 'guest', 'max_args': 1},
    '-R': {'name': 'room_id', 'max_args': 1},
    '-A': {'name': 'arrival', 'is_flag': True},
    '-L': {'name': 'departure', 'is_flag': True},
    '-B': {'name': 'batch_file', 'is_flag': True}
}


def parse_and_validate(argument_list, filename):
    try:
        arguments_ = logparser.parse_args(argument_list, mapping)
        validators.filename_validator(filename)
        validators.logappend_argument_validator(arguments_)
    except ValidationError:
        print('invalid')
        sys.exit(255)
    return arguments_


def run_unnamed(parsed_arguments, filename):
    log_file_name = os.path.join(path_to_here, LOG_PATH, filename)
    token = parsed_arguments['token']
    if os.path.isfile(log_file_name):
        try:
            validators.token_validator(log_file_name, token)
        except ValidationError:
            print('security error', file=sys.stderr)
            sys.exit(255)
        try:
            validators.context_validator(parsed_arguments, log_file_name)
        except ValidationError:
            print('invalid')
            sys.exit(255)
    else:
        with open(log_file_name, 'w') as opened_file:
            supplied_token = hashlib.sha512(token).hexdigest()
            opened_file.write(supplied_token + '\n')
    append_to_log(parsed_arguments, log_file_name)

if len(full_arguments) < 3:
    print('invalid')
    sys.exit(255)

file_ = full_arguments[-1]
arguments = parse_and_validate(full_arguments[1:-1], file_)

if arguments.get('batch_file'):
    with open(file_, 'r') as opened_batch_file:
        for line in opened_batch_file.readlines():
            if '-B' in line:
                print('invalid')
                sys.exit(255)
            new_arguments = line.split()
            run_unnamed(new_arguments[:-1], new_arguments[-1])
else:
    run_unnamed(arguments, file_)
