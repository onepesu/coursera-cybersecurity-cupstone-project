#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import os.path

from log_libraries import logparser
from log_libraries import validators
from log_libraries.encryption import Encrypt
from log_libraries.utils import ValidationError, append_to_log


full_arguments = sys.argv
path = os.getcwd()

mapping = {
    '-T': {'name': 'timestamp'},
    '-K': {'name': 'token'},
    '-E': {'name': 'employee'},
    '-G': {'name': 'guest'},
    '-R': {'name': 'room_id'},
    '-A': {'name': 'arrival', 'is_flag': True},
    '-L': {'name': 'departure', 'is_flag': True},
    '-B': {'name': 'batch_file', 'is_flag': True}
}


def parse_and_validate(argument_list, batch=False):
    try:
        arguments_, filename = logparser.parse_args(argument_list, mapping)
        validators.filename_validator(filename)
        validators.logappend_argument_validator(arguments_)
    except ValidationError:
        print('invalid')
        if batch is False:
            sys.exit(255)
        return

    if batch and arguments.get('batch'):
        print('invalid')
        return

    return arguments_, filename


def run_unnamed(parsed_arguments, filename, batch=False):
    log_file_name = os.path.join(path, filename)
    token = parsed_arguments['token']
    file_exists = os.path.isfile(log_file_name)
    encryptor = Encrypt(token)

    if file_exists:
        try:
            timestamp, employees, guests = validators.token_validator(
                log_file_name, encryptor
            )
        except ValidationError:
            print('invalid')
            if batch is False:
                sys.exit(255)
            return
    else:
        timestamp, employees, guests = 0, {}, {}

    try:
        timestamp, employees, guests = validators.context_validator(
            parsed_arguments, timestamp, employees, guests
        )
    except ValidationError:
        print('invalid')
        if batch is False:
            sys.exit(255)
        return

    append_to_log(timestamp, employees, guests, log_file_name, encryptor)

if len(full_arguments) < 3:
    print('invalid')
    sys.exit(255)

arguments, file_ = parse_and_validate(full_arguments[1:])

if arguments.get('batch_file'):
    if not os.path.isfile(os.path.join(path, file_)):
        print('invalid')
        sys.exit(255)
    with open(file_, 'r') as opened_batch_file:
        for line in opened_batch_file.readlines():
            new_arguments = line.split()
            try:
                args, new_file = parse_and_validate(new_arguments, batch=True)
            except TypeError:
                continue
            run_unnamed(args, new_file, batch=True)
else:
    run_unnamed(arguments, file_)
