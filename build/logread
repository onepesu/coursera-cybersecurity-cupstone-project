#!/usr/bin/env python
from __future__ import print_function
import os.path
import sys

from log_libraries import logparser
from log_libraries import validators
from log_libraries import utils


full_arguments = sys.argv
path = os.getcwd()

if len(full_arguments) < 3:
    print('invalid')
    sys.exit(255)

mapping = {
    '-K': {'name': 'token', 'max_args': 1},
    '-S': {'name': 'status', 'is_flag': True},
    '-R': {'name': 'room_id', 'is_flag': True},
    '-T': {'name': 'total_time', 'is_flag': True},
    '-I': {'name': 'rooms', 'is_flag': True},
    '-E': {'name': 'employee'},
    '-G': {'name': 'guest'}
}

file_ = full_arguments[-1]
try:
    arguments = logparser.parse_args(full_arguments[1:-1], mapping)
    validators.filename_validator(file_)
    validators.logread_argument_validator(arguments)
except utils.ValidationError:
    print('invalid')
    sys.exit(255)

try:
    log_file_name = os.path.join(path, file_)
    if not os.path.isfile(log_file_name):
        raise utils.ValidationError('file does not exist')
    token = arguments['token']
    validators.token_validator(log_file_name, token)
except utils.ValidationError:
    print('integrity violation')
    sys.exit(255)

if arguments.get('status'):
    utils.print_status(arguments, log_file_name)
elif arguments.get('room_id'):
    utils.print_room_id(arguments, log_file_name)
elif arguments.get('total_time'):
    utils.print_total_time(arguments, log_file_name)
elif arguments.get('rooms'):
    utils.print_rooms(arguments, log_file_name)
