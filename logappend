#!/usr/bin/env python
from __future__ import print_function
import os
import os.path
import sys
import hashlib

from log_libraries import logparser
from log_libraries import validators
from log_libraries.utils import LOG_PATH, ValidationError, append_to_log


path_to_here = os.path.dirname(os.path.abspath(__file__))
full_arguments = sys.argv

if len(full_arguments) < 3:
    print('invalid')
    sys.exit(255)

mapping = {
    '-T': {'name': 'timestamp', 'max_args': 1},
    '-K': {'name': 'token', 'max_args': 1},
    '-E': {'name': 'employee', 'max_args': 1},
    '-G': {'name': 'guest', 'max_args': 1},
    '-R': {'name': 'room_id', 'max_args': 1},
    '-A': {'name': 'arrival', 'is_flag': True},
    '-L': {'name': 'departure', 'is_flag': True},
    '-B': {'name': 'batch_file', 'is_flag': True}
}

file_ = full_arguments[-1]
try:
    arguments = logparser.parse_args(full_arguments[1:-1], mapping)
    validators.filename_validator(file_)
    validators.logappend_argument_validator(arguments)
except ValidationError:
    print('invalid')
    sys.exit(255)
if arguments.get('batch_file'):
    with open(file_, 'r') as opened_file:
        for line in opened_file.readlines():
            if '-B' in line:
                os.system('./logappend ')
            os.system('./logappend ' + line)
else:
    log_file_name = os.path.join(path_to_here, LOG_PATH, file_)
    token = arguments['token']
    if os.path.isfile(log_file_name):
        try:
            validators.token_validator(log_file_name, token)
        except ValidationError:
            print('security error', file=sys.stderr)
            sys.exit(255)
    else:
        with open(log_file_name, 'w') as opened_file:
            supplied_token = hashlib.sha512(token).hexdigest()
            opened_file.write(supplied_token + '\n')
    try:
        validators.context_validator(arguments, log_file_name)
    except ValidationError:
        print('invalid')
        sys.exit(255)
    append_to_log(arguments, log_file_name)
